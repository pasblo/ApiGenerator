Welcome to the ApiGeneratorTM guide. This is a guide to undertand how to comment the code of your project to be understand by the api generator.

FIRSTS STEPS:

-Your project have to be in a folder, and all your .py files mustn't be in any folder inside it.

-The program will ask you some questions at the begining of the creation of the api, it is recomended to read carefully all of them, and answer all of them correctly.

-The api will be created in the same folder as your project is, it will be consisted of a series of .html and .css files inside a folder named as your project name + _Api. It is important to remeber that if you have already a folder named like that, the api generator will not errase it, but it will introduce all the files into that folder.

-At the time of excution, you must double click to a file named index.html, then the web browser will start with your api loaded.

-Important to mention: The api generator is not going to cause any damage to your project, if the code is changed we will not be responsible of any damage taken.

-Please any request or complaints send it to x@gamil.com

COMMENTS OF THE PROJECT:

-Inside a python file can be a function or a class, any other tyoe of code will not be recognized as usefull for api generation. Except: The program will ask you at the begining for a constant program, if you have any program that you want the api to consider as a program of constants please type the name at the answer.

-The speces in this program are not a problem, except the obligatory spaces of python programming, like at the definition of a function, first def, after that a space, finaly the name of the function and the parameters.

-Constants recognition: The program will consider a constant any line not commented that has this type of spelling: x = y, this structure can be found inside a class, but not inside a function. The constant can store any type of value, since a default type of python to a custom class. To add info to the constant you can add next to the spelling: #:type: x;:modifier: y;:info: z. All the constant info must be in the same line and started with a #, not """. The info sections (type, modifier, info), can be in any order and you can skip any number of then even all of them.

-Function recognition: The program will consider a function the following structure: def x(p):. Being x the name and p the parameters to introduce in the function(not necessary to be recognized). If the function is inside another function, it will not be recognized as a function, because that function can only be accesible from inseide the function, so it is useless to include in the api. If the function is inside a class the self parameter will be errased automatically. The default value would be used in the api. Extra information could be added within triple quotes under the declaration of the function, all the first lines up until the end of the comment or the init of another kind of info, will be considered as the main info of the function, extra info: :summary: (Info that is going to be shown in the summary part of the api, a sort sentence or a maximun of two), :type: x (The type of the returned value, if does not return it is recommended to use void, by default is going to put void), :typeInfo: (Info related with the type that is returned), :modifier: x (The modifier of the function can be public(Anyone can use it), private(Only the class that have the function can use it, the way to create a private function on python is to add double low bar at the begining of the name) or protected(Only the class that have the function or any of its subclasses can use it)), :version: (The version this class was added), :throw: (If the function can throw an error. If the function can throw more than one exception the exceptions must be inside a list: [exception1, exception2...]), :throwInfo: (Info related with the error that can be thrown. If the function can throw more than one exception the info of the exceptions must be inside a list: [exceptionInfo1, exceptionInfo2...]), :type parameterName: (The type of the indicated parameter, if the parameter does not exists it will skip it), :info parameterName: (Info related with the indicated parameter, if the parameter does not exists it will skip it). Every extra info will be considerd from the end of the declaration to the begining of the next one or to the end of the comment. To indicate that a type of a parameter is a list you should write: [typeName]. All types recognized(A class that is in the library is named the same) will contain a link to that class in the api. The constructor can not have the :type:, :typeInfo: and :modifier: extra info, if it has all of them would be discarded.

-Class recognition: The program will consider a class the following structure: class x(s): or class x:. Being x the name of the class and s the supers of the class. If the class is inside a class it will not be recognized as as class, because that class can be only accesible from the inside, so it is useless to include in the api. The api generator will do a research to find all the supers of the class and all the direct subclasses, and all of them will be showed in the api. Extra information could be added within triple quotes under the declaration of the class, all the first lines up until the end of the comment will be considered as the info of the class.

-Link recognition: At any moment you can add a link to a web page or to another page of the api, you have to use: {}, if you want to add a link to another web page you have paste it inside the brakets, the linked text would be before the brakets inside parethesis, example: (press to google){https://www.google.com}, you can possibly add the letters(s, o, p, v) just right after the last braket to indicate the way to open the page link, s for opening in the api(can only be opened .html dirs), o for opening the link in other tab, o for opening the link in the same tab, and v for opening the link in another page of the same browser. If you want to link the prhase to a class inside the api you should write the name of the class, if the class is not found, it will be discard, but the text will be showed, example: (classX){ClassX}. If you want to link the prhase to a method, the constructor or the field just type the name of the method, constructor or field without any extra characters, like parenthesis, example: (info){methodName}.